{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Simulación TFG"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Carmen Martín Turrero"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "El objetivo de esta simulación es estudiar un sistema cuyo Hamiltoniano es del tipo:\n",
    "\n",
    "$$\\mathcal{H} = \\sigma_z + H_R + \\sigma_x R$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from numpy import array, dot, transpose, identity, linspace, zeros, sqrt, linalg, exp, kron, trace, log, append, arange, size\n",
    "import numpy as np\n",
    "from tenpy.linalg import random_matrix\n",
    "\n",
    "#Comenzamos haciendo un ejemplo en el que tomamos que la dimensión del baño es N = 4.\n",
    "\n",
    "N = 4\n",
    "\n",
    "#En este caso, los elementos de la base del baño y el sistema los escogemos:\n",
    "\n",
    "#Sistema\n",
    "up = array([1,0])\n",
    "down = array([0,1])\n",
    "\n",
    "#Baño N = 4\n",
    "b1 = array([[1],[0],[0],[0]])\n",
    "b2 = array([[0],[1],[0],[0]])\n",
    "b3 = array([[0],[0],[1],[0]])\n",
    "b4 = array([[0],[0],[0],[1]])\n",
    "\n",
    "\n",
    "#Los elementos de la base del Universo son las posibles combinaciones tensoriales entre los elementos de la base del sistema \n",
    "#y los del baño.En este caso, 8 elementos."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Construcción del Hamiltoniano"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Introduzca la dimensión del baño:200\n",
      "El Hamiltoniano del baño viene descrito por la matriz H_r:\n",
      "[[-0.5         0.          0.         ...  0.          0.\n",
      "   0.        ]\n",
      " [ 0.         -0.49497487  0.         ...  0.          0.\n",
      "   0.        ]\n",
      " [ 0.          0.         -0.48994975 ...  0.          0.\n",
      "   0.        ]\n",
      " ...\n",
      " [ 0.          0.          0.         ...  0.48994975  0.\n",
      "   0.        ]\n",
      " [ 0.          0.          0.         ...  0.          0.49497487\n",
      "   0.        ]\n",
      " [ 0.          0.          0.         ...  0.          0.\n",
      "   0.5       ]]\n",
      "La matriz R de acoplamiento es:\n",
      "[[-0.00947937 -0.01323859  0.00713535 ...  0.02276418 -0.01195956\n",
      "  -0.01807541]\n",
      " [-0.01323859  0.00341708  0.002555   ... -0.00315802  0.0148426\n",
      "  -0.00443961]\n",
      " [ 0.00713535  0.002555    0.03083216 ...  0.0231662  -0.00919625\n",
      "  -0.01560319]\n",
      " ...\n",
      " [ 0.02276418 -0.00315802  0.0231662  ...  0.01872338  0.03625081\n",
      "  -0.01441788]\n",
      " [-0.01195956  0.0148426  -0.00919625 ...  0.03625081 -0.07155051\n",
      "  -0.00966099]\n",
      " [-0.01807541 -0.00443961 -0.01560319 ... -0.01441788 -0.00966099\n",
      "   0.01994792]]\n"
     ]
    }
   ],
   "source": [
    "#Pedimos la dimensión del baño:\n",
    "N = int(input(\"Introduzca la dimensión del baño:\"))\n",
    "\n",
    "#Creamos dos matrices formadas por los elementos de las dos bases, para poder usar el código:\n",
    "Sys = identity(2)\n",
    "B = identity(N)\n",
    "\n",
    "#Escribimos las matrices de Pauli:\n",
    "\n",
    "sigmax = array([[0,1],\n",
    "                [1,0]])\n",
    "sigmaz = array([[1,0],\n",
    "                [0,-1]])\n",
    "\n",
    "#Damos valores H_r y R:\n",
    "\n",
    "Hr = zeros((N,N))\n",
    "diag = linspace(-0.5, 0.5, N)\n",
    "\n",
    "for i in range(N):\n",
    "    Hr[i,i] = diag[i]\n",
    "\n",
    "\n",
    "X = random_matrix.GOE((N,N))\n",
    "R = X/sqrt(8*N)\n",
    "\n",
    "print('El Hamiltoniano del baño viene descrito por la matriz H_r:')\n",
    "print(Hr)\n",
    "print('La matriz R de acoplamiento es:')\n",
    "print(R)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "El Hamiltoniano del sistema es:\n",
      "[[ 0.5        -0.00947937  0.         ... -0.01195956  0.\n",
      "  -0.01807541]\n",
      " [-0.00947937 -1.5        -0.01323859 ...  0.         -0.01807541\n",
      "   0.        ]\n",
      " [ 0.         -0.01323859  0.50502513 ...  0.0148426   0.\n",
      "  -0.00443961]\n",
      " ...\n",
      " [-0.01195956  0.          0.0148426  ... -0.50502513 -0.00966099\n",
      "   0.        ]\n",
      " [ 0.         -0.01807541  0.         ... -0.00966099  1.5\n",
      "   0.01994792]\n",
      " [-0.01807541  0.         -0.00443961 ...  0.          0.01994792\n",
      "  -0.5       ]]\n"
     ]
    }
   ],
   "source": [
    "#Construimos el hamiltoniano como una matriz 2Nx2N: H_nm = <n|H|m>\n",
    "\n",
    "H = zeros((2*N,2*N))\n",
    "p = 0\n",
    "\n",
    "for i in range(N):\n",
    "    a = array(B[:,i])\n",
    "    for m in range(2):\n",
    "        b = array(Sys[:,m])\n",
    "        q = 0\n",
    "        for k in range(N):\n",
    "            c = array(B[:,k])\n",
    "            for l in range(2):\n",
    "                d = array(Sys[:,l])\n",
    "                H[p,q]= dot(b,dot(sigmaz,d))*dot(a,c) + dot(b,d)*dot(a,dot(Hr,c)) + dot(b,dot(sigmax,d))*dot(a,dot(R,c))\n",
    "                q = q+1\n",
    "        p = p+1\n",
    "\n",
    "print('El Hamiltoniano del sistema es:')\n",
    "print(H)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "La matriz diagonalizada del Hamiltoniano es:\n",
      "[[-1.52624943  0.          0.         ...  0.          0.\n",
      "   0.        ]\n",
      " [ 0.         -1.52421213  0.         ...  0.          0.\n",
      "   0.        ]\n",
      " [ 0.          0.         -1.51848628 ...  0.          0.\n",
      "   0.        ]\n",
      " ...\n",
      " [ 0.          0.          0.         ...  0.89384243  0.\n",
      "   0.        ]\n",
      " [ 0.          0.          0.         ...  0.          0.84568963\n",
      "   0.        ]\n",
      " [ 0.          0.          0.         ...  0.          0.\n",
      "  -0.87001884]]\n",
      "Y los autovectores correspondientes son:\n",
      "[[ 6.83103340e-03  5.31693645e-03  7.67907193e-03 ... -4.11314202e-04\n",
      "  -5.49525594e-05 -8.29943061e-06]\n",
      " [ 7.90580753e-02  9.40699007e-01  9.64505726e-02 ...  5.51897885e-03\n",
      "   2.52459951e-03 -1.35070030e-03]\n",
      " [-5.19898466e-03  7.06379204e-03 -2.87093468e-03 ... -5.92842291e-03\n",
      "   1.52085716e-03 -3.10212064e-03]\n",
      " ...\n",
      " [ 3.78362728e-03  2.69914073e-03 -2.19221564e-03 ... -4.04823790e-03\n",
      "  -8.60914368e-03 -1.42127771e-02]\n",
      " [ 4.31216373e-03  9.78246497e-03  2.41431265e-03 ... -1.71492393e-03\n",
      "   4.05457803e-03  1.02173691e-02]\n",
      " [ 2.81939108e-04  6.25553858e-04 -6.20240350e-04 ...  1.86475313e-02\n",
      "   1.50399922e-02 -6.11051309e-03]]\n"
     ]
    }
   ],
   "source": [
    "Eigvals, Eigvect = np.linalg.eig(H)\n",
    "\n",
    "D = zeros((2*N,2*N))\n",
    "for i in range(2*N):\n",
    "    D[i,i] = Eigvals[i]\n",
    "\n",
    "print('La matriz diagonalizada del Hamiltoniano es:')    \n",
    "print(D)\n",
    "\n",
    "print('Y los autovectores correspondientes son:')\n",
    "print(Eigvect) \n",
    "\n",
    "#Las columnas de la matriz Eigvect se corresponden con los autovalores de la misma posición en la matriz diagonal.\n",
    "#Es decir, el autovector de autovalor D(i,i) es Eigvect[:,i]."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Evolución temporal"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Partimos de un estado inicial en el que no hay correlación entre el sistema y el baño, para ver como la evolución del Hamiltoniano produce dicha correlación.\n",
    "\n",
    "$$\\rvert\\Psi(0)\\rangle = \\rvert\\chi(0)\\rangle \\otimes \\rvert\\psi(0)\\rangle$$\n",
    "\n",
    "* Estado inicial del sistema, $\\rvert\\chi(0)\\rangle$\n",
    "* Estado inicial del baño, $\\rvert\\psi(0)\\rangle$ : construímos un estado que simule cierta temperatura."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Defina la temperatura del baño: T(K) = 1\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "1.0"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "float(input(\"Defina la temperatura del baño: T(K) = \"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "El estado inicial del sistema es |χ(0)> = [1 0]\n",
      "El estado inicial del baño a temperatura 0.5 K es |ψ(0)> = [0.107457   0.10691837 0.10638244 0.10584919 0.10531862 0.10479071\n",
      " 0.10426545 0.10374281 0.1032228  0.10270539 0.10219058 0.10167835\n",
      " 0.10116868 0.10066157 0.100157   0.09965497 0.09915544 0.09865842\n",
      " 0.0981639  0.09767185 0.09718227 0.09669514 0.09621045 0.09572819\n",
      " 0.09524835 0.09477092 0.09429588 0.09382322 0.09335293 0.09288499\n",
      " 0.09241941 0.09195615 0.09149522 0.0910366  0.09058028 0.09012624\n",
      " 0.08967448 0.08922499 0.08877774 0.08833274 0.08788997 0.08744942\n",
      " 0.08701108 0.08657494 0.08614098 0.08570919 0.08527958 0.08485211\n",
      " 0.08442679 0.0840036  0.08358253 0.08316357 0.08274671 0.08233194\n",
      " 0.08191925 0.08150863 0.08110006 0.08069355 0.08028907 0.07988662\n",
      " 0.07948618 0.07908776 0.07869133 0.07829689 0.07790442 0.07751392\n",
      " 0.07712538 0.07673879 0.07635414 0.07597141 0.0755906  0.0752117\n",
      " 0.0748347  0.07445959 0.07408636 0.073715   0.0733455  0.07297786\n",
      " 0.07261206 0.07224809 0.07188594 0.07152561 0.07116709 0.07081036\n",
      " 0.07045542 0.07010226 0.06975087 0.06940125 0.06905337 0.06870724\n",
      " 0.06836284 0.06802017 0.06767922 0.06733998 0.06700243 0.06666658\n",
      " 0.06633242 0.06599992 0.0656691  0.06533993 0.06501241 0.06468654\n",
      " 0.06436229 0.06403968 0.06371868 0.06339928 0.06308149 0.0627653\n",
      " 0.06245068 0.06213765 0.06182618 0.06151628 0.06120793 0.06090112\n",
      " 0.06059585 0.06029211 0.0599899  0.0596892  0.05939    0.05909231\n",
      " 0.05879611 0.05850139 0.05820815 0.05791638 0.05762608 0.05733722\n",
      " 0.05704982 0.05676386 0.05647933 0.05619622 0.05591454 0.05563427\n",
      " 0.0553554  0.05507793 0.05480185 0.05452715 0.05425383 0.05398189\n",
      " 0.0537113  0.05344207 0.05317419 0.05290766 0.05264245 0.05237858\n",
      " 0.05211603 0.0518548  0.05159488 0.05133626 0.05107893 0.0508229\n",
      " 0.05056815 0.05031468 0.05006247 0.04981153 0.04956185 0.04931342\n",
      " 0.04906624 0.04882029 0.04857558 0.04833209 0.04808983 0.04784878\n",
      " 0.04760893 0.04737029 0.04713285 0.04689659 0.04666152 0.04642763\n",
      " 0.04619491 0.04596336 0.04573297 0.04550373 0.04527564 0.0450487\n",
      " 0.04482289 0.04459821 0.04437466 0.04415223 0.04393092 0.04371072\n",
      " 0.04349161 0.04327361 0.0430567  0.04284088 0.04262614 0.04241247\n",
      " 0.04219988 0.04198835 0.04177789 0.04156847 0.04136011 0.04115279\n",
      " 0.04094651 0.04074127 0.04053705 0.04033386 0.04013168 0.03993052\n",
      " 0.03973037 0.03953122]\n"
     ]
    }
   ],
   "source": [
    "#Estado inicial del sistema\n",
    "chi0 = up\n",
    "\n",
    "#Estado inicial del baño\n",
    "T = 0.5\n",
    "beta = 1/T   #Tomamos k_B = 1\n",
    "\n",
    "Z = 0\n",
    "psi0 = zeros(N)\n",
    "\n",
    "for i in range(N):\n",
    "    #Sumatorio para hallar la función de partición\n",
    "    Z = Z + exp(-beta*Hr[i,i])\n",
    "    #Aprovechamos el bucle para crear el vector psi(0)\n",
    "    psi0[i] = exp(-beta*Hr[i,i]/2)\n",
    "\n",
    "psi0 = psi0/sqrt(Z)\n",
    "\n",
    "print('El estado inicial del sistema es |\\u03C7(0)> =', chi0)\n",
    "print('El estado inicial del baño a temperatura', T, 'K es |\\u03C8(0)> =', psi0)\n",
    "\n",
    "#En este estado el baño está en equilibrio termodinámico a temperatura 1/beta."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "El estado inicial del universo es |Ψ(0)> = [0.107457   0.10691837 0.10638244 0.10584919 0.10531862 0.10479071\n",
      " 0.10426545 0.10374281 0.1032228  0.10270539 0.10219058 0.10167835\n",
      " 0.10116868 0.10066157 0.100157   0.09965497 0.09915544 0.09865842\n",
      " 0.0981639  0.09767185 0.09718227 0.09669514 0.09621045 0.09572819\n",
      " 0.09524835 0.09477092 0.09429588 0.09382322 0.09335293 0.09288499\n",
      " 0.09241941 0.09195615 0.09149522 0.0910366  0.09058028 0.09012624\n",
      " 0.08967448 0.08922499 0.08877774 0.08833274 0.08788997 0.08744942\n",
      " 0.08701108 0.08657494 0.08614098 0.08570919 0.08527958 0.08485211\n",
      " 0.08442679 0.0840036  0.08358253 0.08316357 0.08274671 0.08233194\n",
      " 0.08191925 0.08150863 0.08110006 0.08069355 0.08028907 0.07988662\n",
      " 0.07948618 0.07908776 0.07869133 0.07829689 0.07790442 0.07751392\n",
      " 0.07712538 0.07673879 0.07635414 0.07597141 0.0755906  0.0752117\n",
      " 0.0748347  0.07445959 0.07408636 0.073715   0.0733455  0.07297786\n",
      " 0.07261206 0.07224809 0.07188594 0.07152561 0.07116709 0.07081036\n",
      " 0.07045542 0.07010226 0.06975087 0.06940125 0.06905337 0.06870724\n",
      " 0.06836284 0.06802017 0.06767922 0.06733998 0.06700243 0.06666658\n",
      " 0.06633242 0.06599992 0.0656691  0.06533993 0.06501241 0.06468654\n",
      " 0.06436229 0.06403968 0.06371868 0.06339928 0.06308149 0.0627653\n",
      " 0.06245068 0.06213765 0.06182618 0.06151628 0.06120793 0.06090112\n",
      " 0.06059585 0.06029211 0.0599899  0.0596892  0.05939    0.05909231\n",
      " 0.05879611 0.05850139 0.05820815 0.05791638 0.05762608 0.05733722\n",
      " 0.05704982 0.05676386 0.05647933 0.05619622 0.05591454 0.05563427\n",
      " 0.0553554  0.05507793 0.05480185 0.05452715 0.05425383 0.05398189\n",
      " 0.0537113  0.05344207 0.05317419 0.05290766 0.05264245 0.05237858\n",
      " 0.05211603 0.0518548  0.05159488 0.05133626 0.05107893 0.0508229\n",
      " 0.05056815 0.05031468 0.05006247 0.04981153 0.04956185 0.04931342\n",
      " 0.04906624 0.04882029 0.04857558 0.04833209 0.04808983 0.04784878\n",
      " 0.04760893 0.04737029 0.04713285 0.04689659 0.04666152 0.04642763\n",
      " 0.04619491 0.04596336 0.04573297 0.04550373 0.04527564 0.0450487\n",
      " 0.04482289 0.04459821 0.04437466 0.04415223 0.04393092 0.04371072\n",
      " 0.04349161 0.04327361 0.0430567  0.04284088 0.04262614 0.04241247\n",
      " 0.04219988 0.04198835 0.04177789 0.04156847 0.04136011 0.04115279\n",
      " 0.04094651 0.04074127 0.04053705 0.04033386 0.04013168 0.03993052\n",
      " 0.03973037 0.03953122 0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.        ]\n"
     ]
    }
   ],
   "source": [
    "#Estado inicial del Universo\n",
    "Psi0 = kron(chi0,psi0)\n",
    "print('El estado inicial del universo es |\\u03A8(0)> =', Psi0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Calculemos el estado inicial del Universo en la base de autovectores del Hamiltoniano:\n",
    "\n",
    "$$\\rvert\\Psi(0)\\rangle = \\underset{n}{\\sum}\\langle\\Psi_{0}\\rvert E_{n}\\rangle\\rvert E_{n}\\rangle\\equiv\\alpha_n\\rvert E_{n}\\rangle $$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 1.20872870e-01  1.07681954e-01 -6.39512082e-02  7.37789637e-02\n",
      " -1.60572038e-01  6.35354634e-04 -1.25355635e-01  2.71477655e-02\n",
      " -5.79669717e-02  5.81344744e-02  1.51857923e-01  4.15401314e-02\n",
      " -7.44815803e-02 -8.81141284e-02  4.30271291e-02  1.34487010e-01\n",
      " -1.10811811e-01 -5.29162034e-02 -1.04812104e-01  5.08821653e-02\n",
      " -1.15910715e-01  2.26415138e-03 -2.84874759e-03  3.68336060e-03\n",
      "  1.13527657e-03  9.31718146e-03 -3.44334921e-03  1.88262331e-03\n",
      " -4.44096706e-03  3.27036964e-03  5.00766062e-03 -6.83117875e-03\n",
      " -6.86288257e-03 -2.58863337e-03  4.82993983e-03 -1.15116604e-02\n",
      "  4.32163293e-03 -1.80693126e-03 -1.25895515e-03  6.25390996e-03\n",
      " -2.03451610e-03  2.55537265e-04  1.09334646e-03  1.10829921e-03\n",
      " -3.98691182e-03  2.53100486e-03  2.25631804e-03 -2.55740838e-03\n",
      " -3.98705559e-03  3.48967947e-03  2.11062299e-03  5.71383299e-02\n",
      "  5.68244725e-02 -1.33644013e-01 -1.13570401e-01 -4.86076014e-02\n",
      " -6.59855565e-02 -1.31032104e-01  1.63455182e-02  1.83602700e-03\n",
      " -1.99539405e-03  1.38281067e-04  2.62562339e-03  6.27523011e-03\n",
      " -1.31091644e-03  1.34031676e-01 -8.01893058e-02 -4.11379956e-02\n",
      "  7.09844931e-02  6.22577694e-02 -2.84084513e-03  6.00360474e-03\n",
      " -4.34474487e-03  5.25794175e-03 -5.14571460e-03  2.16785764e-03\n",
      "  5.89865974e-03 -1.09686518e-01  4.95511611e-03 -6.73374057e-02\n",
      " -4.08362242e-02 -1.22512664e-01 -1.77965082e-03 -9.10621083e-02\n",
      "  5.84174455e-02 -5.12745833e-03 -7.45303233e-03 -3.92071924e-03\n",
      "  5.63581937e-03 -3.07198932e-03 -7.00760855e-04 -4.03345220e-03\n",
      " -3.07453435e-03  1.34402991e-03 -8.84889221e-03  5.40238193e-03\n",
      " -3.37430617e-03 -3.50653843e-02 -1.78885894e-02 -1.03556721e-01\n",
      " -1.49887532e-02 -8.45692824e-02 -8.48178035e-03 -9.43326725e-02\n",
      "  3.61835643e-03 -9.43760929e-03 -2.49261066e-03  1.04942902e-01\n",
      " -1.52132036e-02  5.92872348e-02  9.88669118e-02  1.12654111e-01\n",
      " -1.72021931e-01  8.22326399e-02 -7.30930305e-03  3.93688457e-03\n",
      " -1.20821627e-02 -2.95801964e-02 -4.48251529e-02 -6.42994649e-02\n",
      " -1.11605801e-01  1.22375869e-03 -4.09869115e-03  4.07050993e-03\n",
      " -4.08175593e-03 -1.67897790e-03  7.66219962e-02 -1.83979756e-01\n",
      " -8.00679019e-02 -1.30530179e-01  4.05234496e-02 -4.31491664e-02\n",
      "  8.10680412e-02 -4.50140216e-02 -7.36397719e-03 -1.04651794e-02\n",
      "  3.06363006e-03 -7.79013135e-03  7.95196037e-03  6.98530576e-03\n",
      " -1.64569947e-03  4.54081890e-04  9.78605967e-03  1.02572128e-03\n",
      "  1.26910661e-03  2.46139836e-03  7.48933416e-02 -1.10217092e-02\n",
      " -4.82745970e-02  1.67803599e-01 -1.06547696e-02 -2.93317162e-03\n",
      " -2.47915726e-02  7.98614036e-03 -3.15298496e-02 -6.87375620e-02\n",
      " -4.45397750e-02  9.15424188e-02 -6.07234041e-02 -5.72486191e-02\n",
      "  5.89656286e-02  1.42328448e-03  8.70588460e-03 -1.35371283e-03\n",
      "  1.16513890e-01  6.50629054e-02  4.43155106e-03 -6.64803175e-02\n",
      " -1.93382549e-03 -1.90420452e-04 -2.33072829e-03 -2.95497527e-03\n",
      "  8.75427138e-03  5.46167919e-02 -5.34783787e-03 -4.87026220e-03\n",
      "  8.51024535e-04 -1.92137651e-03 -9.10585457e-03  2.51590399e-03\n",
      "  8.95387114e-03  1.26897449e-03 -5.56788427e-02  9.25013856e-02\n",
      " -3.37882234e-02  1.36442040e-01 -4.20468500e-02 -1.46247755e-01\n",
      "  3.03580549e-02 -1.21148087e-02 -8.47301062e-02 -2.42703884e-03\n",
      " -3.28984500e-02 -6.18295706e-02 -3.01941706e-02  1.05147981e-03\n",
      "  1.31234182e-02  6.30988756e-03  1.41894827e-03 -8.05327064e-03\n",
      " -9.83073571e-04 -2.06158052e-03  2.83187688e-02 -1.40500049e-02\n",
      "  2.80396844e-02 -9.95654232e-02  3.96934727e-02  1.48071406e-03\n",
      "  2.54402831e-03  6.05275692e-04  6.58564385e-03 -2.27470557e-03\n",
      " -2.92196686e-03 -7.12326056e-03 -3.43020298e-03 -6.35089603e-02\n",
      "  8.44413221e-02 -4.14850031e-02  8.65119598e-02 -6.51898342e-02\n",
      "  5.83825848e-02 -5.31806688e-02  1.34696448e-02  7.57577779e-02\n",
      " -7.07018247e-02  5.05423162e-02 -1.44296326e-02 -3.47650302e-02\n",
      " -1.15651323e-03  6.68002225e-03  1.07608961e-03  8.57363625e-04\n",
      " -1.65346912e-03 -7.48910603e-03 -1.20387436e-02  6.19793446e-02\n",
      "  6.05767396e-02 -2.20049673e-03 -8.16401873e-03  1.30070816e-02\n",
      "  7.38516273e-02 -6.38787679e-02  1.02101202e-01 -5.06118082e-02\n",
      " -3.29019568e-02 -1.16057642e-02  2.62133584e-04 -5.20671840e-03\n",
      " -3.83609192e-03  5.47197747e-02  4.74444132e-02  1.87499474e-02\n",
      " -4.77565910e-02  2.57847722e-02  5.57160459e-02 -2.10404038e-03\n",
      " -5.93344471e-03  3.20181642e-03  4.45533433e-03  9.52689486e-03\n",
      "  1.78260205e-02 -3.56917940e-03 -9.56064089e-03 -2.31276881e-03\n",
      "  4.64976887e-03  1.06575415e-02 -4.05198519e-03 -4.81791689e-02\n",
      "  1.22526167e-01  6.96599889e-02  9.16454051e-02  3.96286450e-02\n",
      " -4.59920646e-02 -1.56992781e-02  2.45981977e-03 -6.21180283e-02\n",
      " -5.51594792e-02  3.39483295e-02 -3.55775234e-02  1.97599461e-02\n",
      " -1.05222605e-02  1.16182197e-04 -3.25628733e-03  9.32486573e-02\n",
      " -3.07404446e-02 -3.31804732e-02 -2.68106317e-02  2.77722858e-02\n",
      " -3.44747766e-02  3.43619755e-02 -4.64270788e-02 -4.79375909e-02\n",
      " -1.01934288e-01  2.42215566e-02  6.73011904e-02  8.86332599e-02\n",
      "  2.89333650e-02 -1.47256923e-02 -5.22504843e-02 -1.39634253e-02\n",
      "  7.31262648e-04 -9.06144740e-03  2.22268067e-02 -9.49576446e-03\n",
      "  9.12328518e-03  2.98406412e-03  2.31907878e-03  1.26468525e-02\n",
      "  7.49534936e-04 -8.45448655e-03 -7.34946510e-03  7.06848657e-04\n",
      " -4.49309117e-03  6.70379249e-03  5.70753901e-03 -4.44381508e-02\n",
      "  7.07506938e-02 -1.64038191e-02  2.98170384e-03 -5.23973892e-03\n",
      " -5.43979449e-02  6.61945284e-02 -6.01661876e-02 -1.67347247e-02\n",
      "  1.80869147e-02  4.67090110e-03  1.92031711e-02  1.27107754e-02\n",
      "  2.32612587e-03  1.09099427e-01  2.41731470e-02  5.32399137e-02\n",
      " -2.76180600e-02 -3.34053378e-02  4.68281818e-03 -6.06321184e-03\n",
      " -9.49910263e-03  9.99844035e-04 -2.93683050e-03  5.13907517e-03\n",
      "  1.66078463e-02  1.00942429e-02  9.98286196e-03 -1.73414144e-03\n",
      " -1.72825727e-02 -3.96786089e-02  6.98742283e-02 -1.18607395e-02\n",
      " -1.23630427e-01  4.66218041e-02  6.01988210e-02  7.38076262e-02\n",
      " -1.37945751e-02 -3.77225289e-03  3.60903798e-02 -7.59316037e-02\n",
      "  3.73618286e-02 -3.21147338e-02 -2.99052330e-02 -2.60157386e-02\n",
      " -6.37812146e-02 -6.20321013e-02 -2.64938738e-02 -8.02284917e-02\n",
      " -9.90525806e-03 -7.05501026e-03 -1.02681519e-03 -1.20783591e-02\n",
      " -7.12855026e-03  2.79427893e-03 -5.87507268e-03 -8.65288183e-03\n",
      " -6.57595145e-03 -2.41418447e-03 -6.83482417e-04 -1.30337856e-03\n",
      " -1.58652747e-02  1.00853332e-02 -1.49534178e-02  9.66468684e-03\n",
      " -1.05303913e-01  5.73611902e-03  3.06830090e-02  6.83021507e-02\n",
      " -3.53951460e-02  8.05196575e-03  4.20414479e-03 -1.39440506e-03\n",
      " -1.04276367e-02 -5.74115286e-03 -4.64603546e-03  8.32121368e-03\n",
      " -1.16452522e-03  3.66821189e-02 -1.78393114e-02 -3.55992298e-04\n",
      " -4.57072684e-02 -2.50423317e-02  2.37230625e-02 -1.22807044e-02]\n"
     ]
    }
   ],
   "source": [
    "alpha = zeros(2*N)\n",
    "\n",
    "for i in range(2*N):\n",
    "    alpha[i] = dot(Psi0,Eigvect[:,i])\n",
    "\n",
    "print(alpha)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "La evolución temporal en esta base es:\n",
    "\n",
    "$$\\rvert\\Psi(t)\\rangle = \\underset{n}{\\sum}\\alpha_n e^{-iE_{n}t/\\hbar}\\rvert E_{n}\\rangle $$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "def ev_temp(t):\n",
    "    hbarra = 1\n",
    "    Psit = 0\n",
    "    for i in range(2*N):\n",
    "        Psit += alpha[i]*exp(-1j*D[i,i]*t/hbarra)*Eigvect[:,i]\n",
    "    return Psit"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A continuación, deshacemos el cambio de base, para poder calcular la entropía utilizando la base original sistema-baño:\n",
    "\n",
    "$$\\rvert\\Psi(t)\\rangle = \\underset{nn}{\\sum}C_{nm}(t) \\rvert n\\rangle_{S} \\otimes \\rvert m\\rangle_{B}$$\n",
    "\n",
    "Una vez en la base adecuada, construimos la matriz densidad correspondiente al estado:\n",
    "\n",
    "$$\\rho (t)\\equiv \\rvert\\Psi(t)\\rangle\\langle\\Psi(t)\\rvert = \\underset{nm,ij}{\\sum}C_{ij}^*(t)  C_{nm}(t) \\rvert n\\rangle_{S}\\langle i\\rvert_{S} \\otimes \\rvert m\\rangle_{B}\\langle j\\rvert_{B}$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "def matriz_densidad(C):\n",
    "    rho  = zeros((2*N,2*N))\n",
    "    q = 0\n",
    "    pos_il = 0\n",
    "    for l in range(N):\n",
    "        for i in range(2):\n",
    "            p = 0\n",
    "            pos_nm = 0\n",
    "            for m in range(N):\n",
    "                for n in range(2):\n",
    "                    rho[p,q] = C[pos_il].conjugate()*C[pos_nm]\n",
    "                    p += 1\n",
    "                    pos_nm += 1\n",
    "            q += 1\n",
    "            pos_il += 1\n",
    "    return rho"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Posteriormente, se calcula la matriz densidad reducida del sistema. Para ello calculamos la traza de la matriz sobre la base del baño:\n",
    "\n",
    "$$\\rho (t) = Tr_{B}[\\rho (t)] = \\underset{k}\\sum \\langle k\\rvert\\rho (t)\\rvert k\\rangle_{B}$$\n",
    "\n",
    "Combinando esta expresión con la que teníamos para la matriz densidad, nos queda una forma de calcularla más simplificada:\n",
    "\n",
    "$$\\rho (t)= \\underset{k}{\\sum} \\underset{nm,ij}{\\sum} C_{ij}^*(t)  C_{nm}(t) \\rvert n\\rangle_{S}\\langle i\\rvert_{S} \\otimes _{B}\\langle k\\rvert m\\rangle_{BB}\\langle j\\rvert k\\rangle_{B} = \\underset{k}{\\sum} \\underset{n,i}{\\sum} C_{ik}^*(t)  C_{nk}(t) \\rvert n\\rangle_{S}\\langle i\\rvert_{S}$$\n",
    "\n",
    "debido a que los vectores de la base del baño son ortogonales y, por tanto, $_{B}\\langle j\\rvert k\\rangle_{B} = \\delta_{jk}$.\n",
    "\n",
    "Finalmente, calculamos la entropía de entrelazamiento como:\n",
    "\n",
    "$$S = -Tr[\\rho_{s}(t)]log[\\rho_{s}(t)]$$\n",
    "\n",
    "Y si diagonalizamos la matriz $\\rho_{s}(t)$, podemos calcular dicha entropía en función de los autovalores:\n",
    "\n",
    "$$S = -\\underset{i}{\\sum}\\lambda_{i}log[\\lambda_{i}]$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-24-5aa3708bdc08>:18: ComplexWarning: Casting complex values to real discards the imaginary part\n",
      "  rho_s[i,n] = A\n"
     ]
    }
   ],
   "source": [
    "T = arange(0,40,0.05)\n",
    "S_times = zeros(size(T))\n",
    "\n",
    "for t in range(size(T)):\n",
    "    Psit = ev_temp(T[t])\n",
    "    #Realizamos el cambio de base:\n",
    "    C = zeros((N,2), dtype = 'complex_')       #Vector de coeficientes para el estado en función del tiempo en la base original.\n",
    "    for i in range(N):\n",
    "        for k in range(2):\n",
    "            C[i,k] = dot(Psit.conjugate(),kron(Sys[:,k],B[:,i]))\n",
    "    #Calculamos la matriz densidad reducida del sistema:\n",
    "    rho_s = zeros((2,2))\n",
    "    for i in range(2):\n",
    "        for n in range(2):\n",
    "            A = 0\n",
    "            for k in range(N):\n",
    "                A += C[k,i].conjugate()*C[k,n]\n",
    "            rho_s[i,n] = A\n",
    "    #Calculamos la entropía de entrelazamiento:\n",
    "    lambd = np.linalg.eigvals(rho_s)\n",
    "    S = 0\n",
    "    for i in range(2):\n",
    "        S += lambd[i]*log(lambd[i])\n",
    "    S_times[t] = -S"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from matplotlib.pyplot import show, plot, xlabel, ylabel, figure, legend, xlim\n",
    "figure(figsize=(10, 6))\n",
    "plot(T,S_times,\"b\")\n",
    "xlabel( \"Tiempo\", fontsize = 12, color=\"black\")\n",
    "ylabel(\"Entropía de entrelazamiento\" , fontsize = 12, color=\"black\")\n",
    "\n",
    "show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
